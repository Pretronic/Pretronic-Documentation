{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Overview"},{"location":"changelog/","text":"Changelog \u00b6 1.0.4 - December 11, 2020 \u00b6 First public release version Messages and variables load languages from GitHub repository Language definition file (languages.json) document.getElementsByClassName(\"md-nav--primary\")[0].hidden = true;","title":"Versions"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#104-december-11-2020","text":"First public release version Messages and variables load languages from GitHub repository Language definition file (languages.json) document.getElementsByClassName(\"md-nav--primary\")[0].hidden = true;","title":"1.0.4 - December 11, 2020"},{"location":"guides/installation/","text":"Installation \u00b6 The installation is very easy and can be done with the npm or yarn packet manager. You can find the package on npmjs . npm npm install @pretronic/react-github-languages yarn yarn add @pretronic/react-github-languages Language provider setup \u00b6 After the installation you should warp your app code with the LanguageProvider , this wrapper component is responsible for the language management and passes the translations to the Message components. The repository property must contain the name of your GitHub repository, see the repository-setup guide to get more information about the structure. Finally, pass the selected language (code) of your user to the language provider with the language property. import React from 'react' ; import { LanguageProvider } from \"@pretronic/react-github-languages\" ; export default class App extends React . Component < {}, {} > { render() { return ( < LanguageProvider repository = { \"Pretronic/PretronicAccountTranslations\" } branch = { \"main\" } language = { \"en\" } > /* Your app code comes here */ < /LanguageProvider>) } } Read more about how to use a message message . Properties \u00b6 Property Description repository The name of your GitHub repository branch The name of the branch (usually main) language The selected language fallbackLanguage The fallback language if the message is not available in the selected language","title":"Installation"},{"location":"guides/installation/#installation","text":"The installation is very easy and can be done with the npm or yarn packet manager. You can find the package on npmjs . npm npm install @pretronic/react-github-languages yarn yarn add @pretronic/react-github-languages","title":"Installation"},{"location":"guides/installation/#language-provider-setup","text":"After the installation you should warp your app code with the LanguageProvider , this wrapper component is responsible for the language management and passes the translations to the Message components. The repository property must contain the name of your GitHub repository, see the repository-setup guide to get more information about the structure. Finally, pass the selected language (code) of your user to the language provider with the language property. import React from 'react' ; import { LanguageProvider } from \"@pretronic/react-github-languages\" ; export default class App extends React . Component < {}, {} > { render() { return ( < LanguageProvider repository = { \"Pretronic/PretronicAccountTranslations\" } branch = { \"main\" } language = { \"en\" } > /* Your app code comes here */ < /LanguageProvider>) } } Read more about how to use a message message .","title":"Language provider setup"},{"location":"guides/installation/#properties","text":"Property Description repository The name of your GitHub repository branch The name of the branch (usually main) language The selected language fallbackLanguage The fallback language if the message is not available in the selected language","title":"Properties"},{"location":"guides/language-list/","text":"Language List \u00b6 Now, if you want to give your users the possibility to choose their preferred language, you can use the object LanguageList to list all available languages. The LanguageList contains all languages from the languages.json file. < LanguageList render = { languages => { return < ul > { languages . map ( language => { return ( < li > { language . name } < /li>) })} < /ul> }} />","title":"Language list"},{"location":"guides/language-list/#language-list","text":"Now, if you want to give your users the possibility to choose their preferred language, you can use the object LanguageList to list all available languages. The LanguageList contains all languages from the languages.json file. < LanguageList render = { languages => { return < ul > { languages . map ( language => { return ( < li > { language . name } < /li>) })} < /ul> }} />","title":"Language List"},{"location":"guides/messages/","text":"Messages \u00b6 The Message object is used to replace a conventional message with a configured translatable message. The name property must contain the name of your message key configured in the translation file. Optionally, you can pass variables to your message, which will be replaced and converted to a string. <Message name={\"settings.name\"} variables={{name: \"Jack\"}} /> Example \u00b6 This example shows how you can replace your current messages with translatable messages. Before < div > < p > Hello { name }, how are you ?< /p> < /div> After < div > < p > < Message name = { \"question\" } variables = {{ name : \"Jack\" }} /> < /p> < /div> The configured translation file will look similar to this: { \"name\" : \"English\" , \"localName\" : \"English\" , \"code\" : \"en\" , \"messages\" : { \"question\" : \"Hello {name}, how are you?\" } } Properties \u00b6 Property Description name The name is the key of the message variables Variables to be replaced in the message default A default message if the message could not be found","title":"Messages"},{"location":"guides/messages/#messages","text":"The Message object is used to replace a conventional message with a configured translatable message. The name property must contain the name of your message key configured in the translation file. Optionally, you can pass variables to your message, which will be replaced and converted to a string. <Message name={\"settings.name\"} variables={{name: \"Jack\"}} />","title":"Messages"},{"location":"guides/messages/#example","text":"This example shows how you can replace your current messages with translatable messages. Before < div > < p > Hello { name }, how are you ?< /p> < /div> After < div > < p > < Message name = { \"question\" } variables = {{ name : \"Jack\" }} /> < /p> < /div> The configured translation file will look similar to this: { \"name\" : \"English\" , \"localName\" : \"English\" , \"code\" : \"en\" , \"messages\" : { \"question\" : \"Hello {name}, how are you?\" } }","title":"Example"},{"location":"guides/messages/#properties","text":"Property Description name The name is the key of the message variables Variables to be replaced in the message default A default message if the message could not be found","title":"Properties"},{"location":"guides/repository-setup/","text":"Repository setup \u00b6 As the name of the project says, the library consumes language files directly from a GitHub repository, you need to create a new repository for this. If you don't know how to create a repository, use this guide from GitHub. Language configuration \u00b6 Now let's start configuring your repository. For the first step, you need to define all your languages in the language.json. Create a new entry for each language and push the finished file (languages.json) to your repository. { \"languages\" : [ { \"name\" : \"English\" , \"localName\" : \"English\" , \"code\" : \"en\" }, { \"name\" : \"German\" , \"localName\" : \"Deutsch\" , \"code\" : \"de\" } ] } You can use the command line or add the file directly to the repository, see this guide if you don't know how to upload a file to a GitHub repository. Create a new language file \u00b6 After configuring the languages, create a new translation file (code.json / en.json) for each language and push it back to your repository. { \"name\" : \"English\" , \"localName\" : \"English\" , \"code\" : \"en\" , \"messages\" : { \"settings.title\" : \"Settings\" , \"settings.name\" : \"Your name is {name}\" } } Final repository \u00b6 Your repository should now look something like the picture, you can also find an example repository here Make sure that your repository is public.","title":"Repository setup"},{"location":"guides/repository-setup/#repository-setup","text":"As the name of the project says, the library consumes language files directly from a GitHub repository, you need to create a new repository for this. If you don't know how to create a repository, use this guide from GitHub.","title":"Repository setup"},{"location":"guides/repository-setup/#language-configuration","text":"Now let's start configuring your repository. For the first step, you need to define all your languages in the language.json. Create a new entry for each language and push the finished file (languages.json) to your repository. { \"languages\" : [ { \"name\" : \"English\" , \"localName\" : \"English\" , \"code\" : \"en\" }, { \"name\" : \"German\" , \"localName\" : \"Deutsch\" , \"code\" : \"de\" } ] } You can use the command line or add the file directly to the repository, see this guide if you don't know how to upload a file to a GitHub repository.","title":"Language configuration"},{"location":"guides/repository-setup/#create-a-new-language-file","text":"After configuring the languages, create a new translation file (code.json / en.json) for each language and push it back to your repository. { \"name\" : \"English\" , \"localName\" : \"English\" , \"code\" : \"en\" , \"messages\" : { \"settings.title\" : \"Settings\" , \"settings.name\" : \"Your name is {name}\" } }","title":"Create a new language file"},{"location":"guides/repository-setup/#final-repository","text":"Your repository should now look something like the picture, you can also find an example repository here Make sure that your repository is public.","title":"Final repository"}]}