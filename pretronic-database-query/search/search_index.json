{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Overview"},{"location":"changelog/","text":"Changelog \u00b6 Material for MkDocs Insiders \u00b6 1.11.2 _ November 29, 2020 \u00b6 Fixed #2068: Search highlight interprets code blocks as JavaScript 1.11.1 _ November 29, 2020 \u00b6 Refactored styling to be more stable and easier to adjust Fixed some styling regressions from latest features 1.0.0 _ November 22, 2020 \u00b6 Added support for rendering admonitions as inline blocks document.getElementsByClassName(\"md-nav--primary\")[0].hidden = true;","title":"Versions"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#material-for-mkdocs-insiders","text":"","title":"Material for MkDocs Insiders"},{"location":"changelog/#1112-_-november-29-2020","text":"Fixed #2068: Search highlight interprets code blocks as JavaScript","title":"1.11.2 _ November 29, 2020"},{"location":"changelog/#1111-_-november-29-2020","text":"Refactored styling to be more stable and easier to adjust Fixed some styling regressions from latest features","title":"1.11.1 _ November 29, 2020"},{"location":"changelog/#100-_-november-22-2020","text":"Added support for rendering admonitions as inline blocks document.getElementsByClassName(\"md-nav--primary\")[0].hidden = true;","title":"1.0.0 _ November 22, 2020"},{"location":"guides/project-setup/database-collection/","text":"Database collection \u00b6 Introduction \u00b6 The database collection holds an undefined amount of entries. It is been created with a predefined schema. From the database object, the database collection can be got. Create a database collection in a database \u00b6 DatabaseCollection customers = database . createCollection ( \"customers\" ) . field ( \"id\" , DataType . INTEGER , FieldOption . AUTO_INCREMENT , FieldOption . PRIMARY_KEY ) . field ( \"name\" , DataType . STRING , FieldOption . NOT_NULL , FieldOption . INDEX ) . field ( \"firstName\" , DataType . STRING , FieldOption . NOT_NULL ) . field ( \"verified\" , DataType . BOOLEAN ) . field ( \"phoneNumber\" , DataType . STRING ) . create (); Queries \u00b6 Note Below are some very simple example queries, for more information and more advanced queries, show in the queries section . Insert query \u00b6 This query inserts a new collection entry with the name Shephard and the firstName Bill . The database collection fields verified and phoneNumber are null. The id will be generated automatically by your database. int generatedId = customers . insert () . set ( \"name\" , \"Shepard\" ) . set ( \"firstName\" , \"Bill\" ) . executeAndGetGeneratedKeyAsInt ( \"id\" ); Find query \u00b6 This query searches for a collection entry, where the value of the field name equals Shepard . In the next step, the result size is printed and is being looped and all fields are printed. Note In some databases, like MySQL, the where operator is equals ignore case by default. Equals ignore case should be changed on database side. FindQuery byName = customers . find (). where ( \"name\" , \"Shepard\" ); QueryResult result = byName . execute (); System . out . println ( result . size ()); result . forEach ( entry -> { int id = entry . getInt ( \"id\" ); String name = entry . getString ( \"name\" ); String firstName = entry . getString ( \"firstName\" ); boolean verified = entry . getBoolean ( \"verified\" ); String phoneNumber = entry . getString ( \"phoneNumber\" ); }); Update query \u00b6 This query updates all entries fields phoneNumber to +49 000000 and verified to true , where the firstName equals Bill . customers . update () . set ( \"phoneNumber\" , \"+49 000000\" ) . set ( \"verified\" , true ) . where ( \"firstName\" , \"Bill\" ). execute (); Delete query \u00b6 This query deletes all entries, where the field firstName equals Bill . collection . delete () . where ( \"firstName\" , \"Bill\" ). execute ();","title":"Database Collection"},{"location":"guides/project-setup/database-collection/#database-collection","text":"","title":"Database collection"},{"location":"guides/project-setup/database-collection/#introduction","text":"The database collection holds an undefined amount of entries. It is been created with a predefined schema. From the database object, the database collection can be got.","title":"Introduction"},{"location":"guides/project-setup/database-collection/#create-a-database-collection-in-a-database","text":"DatabaseCollection customers = database . createCollection ( \"customers\" ) . field ( \"id\" , DataType . INTEGER , FieldOption . AUTO_INCREMENT , FieldOption . PRIMARY_KEY ) . field ( \"name\" , DataType . STRING , FieldOption . NOT_NULL , FieldOption . INDEX ) . field ( \"firstName\" , DataType . STRING , FieldOption . NOT_NULL ) . field ( \"verified\" , DataType . BOOLEAN ) . field ( \"phoneNumber\" , DataType . STRING ) . create ();","title":"Create a database collection in a database"},{"location":"guides/project-setup/database-collection/#queries","text":"Note Below are some very simple example queries, for more information and more advanced queries, show in the queries section .","title":"Queries"},{"location":"guides/project-setup/database-collection/#insert-query","text":"This query inserts a new collection entry with the name Shephard and the firstName Bill . The database collection fields verified and phoneNumber are null. The id will be generated automatically by your database. int generatedId = customers . insert () . set ( \"name\" , \"Shepard\" ) . set ( \"firstName\" , \"Bill\" ) . executeAndGetGeneratedKeyAsInt ( \"id\" );","title":"Insert query"},{"location":"guides/project-setup/database-collection/#find-query","text":"This query searches for a collection entry, where the value of the field name equals Shepard . In the next step, the result size is printed and is being looped and all fields are printed. Note In some databases, like MySQL, the where operator is equals ignore case by default. Equals ignore case should be changed on database side. FindQuery byName = customers . find (). where ( \"name\" , \"Shepard\" ); QueryResult result = byName . execute (); System . out . println ( result . size ()); result . forEach ( entry -> { int id = entry . getInt ( \"id\" ); String name = entry . getString ( \"name\" ); String firstName = entry . getString ( \"firstName\" ); boolean verified = entry . getBoolean ( \"verified\" ); String phoneNumber = entry . getString ( \"phoneNumber\" ); });","title":"Find query"},{"location":"guides/project-setup/database-collection/#update-query","text":"This query updates all entries fields phoneNumber to +49 000000 and verified to true , where the firstName equals Bill . customers . update () . set ( \"phoneNumber\" , \"+49 000000\" ) . set ( \"verified\" , true ) . where ( \"firstName\" , \"Bill\" ). execute ();","title":"Update query"},{"location":"guides/project-setup/database-collection/#delete-query","text":"This query deletes all entries, where the field firstName equals Bill . collection . delete () . where ( \"firstName\" , \"Bill\" ). execute ();","title":"Delete query"},{"location":"guides/project-setup/database/","text":"Database \u00b6 Introduction \u00b6 The database can be got from you database driver. It includes the associated database collections. Get a database \u00b6 Database database = driver . getDatabase ( \"Test\" ); Note For more information, like getting or creating a database collection, go to this site","title":"Database"},{"location":"guides/project-setup/database/#database","text":"","title":"Database"},{"location":"guides/project-setup/database/#introduction","text":"The database can be got from you database driver. It includes the associated database collections.","title":"Introduction"},{"location":"guides/project-setup/database/#get-a-database","text":"Database database = driver . getDatabase ( \"Test\" ); Note For more information, like getting or creating a database collection, go to this site","title":"Get a database"},{"location":"guides/project-setup/driver-config-setup/","text":"Driver config \u00b6 The driver config is the base of database driver. It contains the required options to connect the driver to your database. The driver config is divided into remote database driver config for connecting to remote databases and local database driver configs for connecting to local databases like file databases. Pre-Requirements \u00b6 You need a slf4j logger in your runtime. Either you declare a logger on your self, or you can use a PretronicLogger and set it as a slf4j logger instance. Setup a PretronicLogger as slf4j logger instance: PretronicLogger logger = PretronicLoggerFactory . getLogger (); SLF4JStaticBridge . setLogger ( logger ); Create a driver config \u00b6 There are two options to create a driver config. One option is to load it from a document or from a file and the other option is to create a driver config directly from the code. In these examples, we use for the local database config example h2 portable and for remote MySQL. Loading from a document \u00b6 Config examples For a local database: location : 'databases/' driver : 'net.pretronic.databasequery.sql.driver.SQLDatabaseDriver' name : 'Default' dialectName : 'H2Portable' useSSL : false For a remote database: address : '127.0.0.1' username : 'root' password : '******' driver : 'net.pretronic.databasequery.sql.driver.SQLDatabaseDriver' name : 'MySQL' dialectName : 'MySQL' useSSL : false Load a driver config from a file: DatabaseDriverConfig <?> config = DatabaseDriverFactory . create ( DocumentFileType . YAML . getReader (). read ( new File ( \"driver-config.yml\" ))); Create directly from code \u00b6 Create a h2-portable driver config: DatabaseDriverConfig <?> config = new SQLDatabaseDriverConfigBuilder () . setName ( \"H2-Portable\" ) . setLocation ( new File ( \"databases/\" )) . setDialect ( Dialect . H2_PORTABLE ) . setUseSSL ( false ) . build (); Create a mysql driver config: DatabaseDriverConfig <?> config = new SQLDatabaseDriverConfigBuilder () . setName ( \"MySQL\" ) . setAddress ( new InetSocketAddress ( \"127.0.0.1\" , 3306 )) . setDialect ( Dialect . MYSQL ) . setUsername ( \"root\" ) . setPassword ( \"'******'\" ) . setUseSSL ( false ) . build ()","title":"Driver Configuration"},{"location":"guides/project-setup/driver-config-setup/#driver-config","text":"The driver config is the base of database driver. It contains the required options to connect the driver to your database. The driver config is divided into remote database driver config for connecting to remote databases and local database driver configs for connecting to local databases like file databases.","title":"Driver config"},{"location":"guides/project-setup/driver-config-setup/#pre-requirements","text":"You need a slf4j logger in your runtime. Either you declare a logger on your self, or you can use a PretronicLogger and set it as a slf4j logger instance. Setup a PretronicLogger as slf4j logger instance: PretronicLogger logger = PretronicLoggerFactory . getLogger (); SLF4JStaticBridge . setLogger ( logger );","title":"Pre-Requirements"},{"location":"guides/project-setup/driver-config-setup/#create-a-driver-config","text":"There are two options to create a driver config. One option is to load it from a document or from a file and the other option is to create a driver config directly from the code. In these examples, we use for the local database config example h2 portable and for remote MySQL.","title":"Create a driver config"},{"location":"guides/project-setup/driver-config-setup/#loading-from-a-document","text":"","title":"Loading from a document"},{"location":"guides/project-setup/driver-config-setup/#create-directly-from-code","text":"Create a h2-portable driver config: DatabaseDriverConfig <?> config = new SQLDatabaseDriverConfigBuilder () . setName ( \"H2-Portable\" ) . setLocation ( new File ( \"databases/\" )) . setDialect ( Dialect . H2_PORTABLE ) . setUseSSL ( false ) . build (); Create a mysql driver config: DatabaseDriverConfig <?> config = new SQLDatabaseDriverConfigBuilder () . setName ( \"MySQL\" ) . setAddress ( new InetSocketAddress ( \"127.0.0.1\" , 3306 )) . setDialect ( Dialect . MYSQL ) . setUsername ( \"root\" ) . setPassword ( \"'******'\" ) . setUseSSL ( false ) . build ()","title":"Create directly from code"},{"location":"guides/project-setup/driver-setup/","text":"Driver setup \u00b6 Introduction \u00b6 The driver is the base of the database connection. From it, you can get databases. It is created with minimum of a driver config and a name. Create a driver \u00b6 DatabaseDriver driver = DatabaseDriverFactory . create ( \"MyDriver\" , driverConfig , logger );","title":"Driver Setup"},{"location":"guides/project-setup/driver-setup/#driver-setup","text":"","title":"Driver setup"},{"location":"guides/project-setup/driver-setup/#introduction","text":"The driver is the base of the database connection. From it, you can get databases. It is created with minimum of a driver config and a name.","title":"Introduction"},{"location":"guides/project-setup/driver-setup/#create-a-driver","text":"DatabaseDriver driver = DatabaseDriverFactory . create ( \"MyDriver\" , driverConfig , logger );","title":"Create a driver"},{"location":"guides/project-setup/include-in-project/","text":"Include in your project \u00b6 There are several options to include pretronic database query into your project. In this example below, we show it with maven and gradle. Note You have to include your jdbc drivers, for example mysql or h2 portable. Repository \u00b6 Maven <repository> <id> pretronic </id> <url> https://repository.pretronic.net/repository/pretronic/ </url> </repository> Gradle repositories { maven { url \"https://repository.pretronic.net/repository/pretronic/\" } } Dependencies \u00b6 Note Replace VERSION with your desired version Only api \u00b6 Maven <dependency> <groupId> net.pretronic.databasequery </groupId> <artifactId> pretronicdatabasequery-api </artifactId> <version> VERSION </version> <scope> compile </scope> </dependency> Gradle dependencies { compile 'net.pretronic.databasequery:pretronicdatabasequery-api:VERSION' } For sql \u00b6 Maven <dependency> <groupId> net.pretronic.databasequery </groupId> <artifactId> pretronicdatabasequery-sql </artifactId> <version> VERSION </version> <scope> compile </scope> </dependency> Gradle dependencies { compile 'net.pretronic.databasequery:pretronicdatabasequery-sql:VERSION' }","title":"Include in project"},{"location":"guides/project-setup/include-in-project/#include-in-your-project","text":"There are several options to include pretronic database query into your project. In this example below, we show it with maven and gradle. Note You have to include your jdbc drivers, for example mysql or h2 portable.","title":"Include in your project"},{"location":"guides/project-setup/include-in-project/#repository","text":"Maven <repository> <id> pretronic </id> <url> https://repository.pretronic.net/repository/pretronic/ </url> </repository> Gradle repositories { maven { url \"https://repository.pretronic.net/repository/pretronic/\" } }","title":"Repository"},{"location":"guides/project-setup/include-in-project/#dependencies","text":"Note Replace VERSION with your desired version","title":"Dependencies"},{"location":"guides/project-setup/include-in-project/#only-api","text":"Maven <dependency> <groupId> net.pretronic.databasequery </groupId> <artifactId> pretronicdatabasequery-api </artifactId> <version> VERSION </version> <scope> compile </scope> </dependency> Gradle dependencies { compile 'net.pretronic.databasequery:pretronicdatabasequery-api:VERSION' }","title":"Only api"},{"location":"guides/project-setup/include-in-project/#for-sql","text":"Maven <dependency> <groupId> net.pretronic.databasequery </groupId> <artifactId> pretronicdatabasequery-sql </artifactId> <version> VERSION </version> <scope> compile </scope> </dependency> Gradle dependencies { compile 'net.pretronic.databasequery:pretronicdatabasequery-sql:VERSION' }","title":"For sql"},{"location":"guides/queries/","text":"Pretronic Database Query provides a large set of different queries.","title":"Overview"},{"location":"guides/queries/aggregations/","text":"","title":"Aggregations"},{"location":"guides/queries/data-types/","text":"","title":"Data Types"},{"location":"guides/queries/insert/","text":"The insert query is used to add new rows into your database, there are different possibilities to that. Insert a single value \u00b6 int id = employees . insert () . set ( \"Name\" , \"McCain\" ) . set ( \"FirstName\" , \"Jack\" ) . set ( \"ManagerId\" , 34 ) . set ( \"Active\" , true ) . execute ( \"Id\" ); int id = employees . insert () . set ( \"Name\" , \"McCain\" ) . set ( \"FirstName\" , \"Jack\" ) . set ( \"ManagerId\" , 34 ) . set ( \"Active\" , true ) . executeAndGetGeneratedKeyAsLong ( \"Id\" ); Insert multiple values \u00b6 employees . insert () . set ( \"Name\" , \"McCain\" , \"Bill\" ) . set ( \"FirstName\" , \"Jack\" , \"Shepard\" ) . set ( \"ManagerId\" , 34 , 48 ) . set ( \"Active\" , true , true ) . execute ();","title":"Insert Query"},{"location":"guides/queries/insert/#insert-a-single-value","text":"int id = employees . insert () . set ( \"Name\" , \"McCain\" ) . set ( \"FirstName\" , \"Jack\" ) . set ( \"ManagerId\" , 34 ) . set ( \"Active\" , true ) . execute ( \"Id\" ); int id = employees . insert () . set ( \"Name\" , \"McCain\" ) . set ( \"FirstName\" , \"Jack\" ) . set ( \"ManagerId\" , 34 ) . set ( \"Active\" , true ) . executeAndGetGeneratedKeyAsLong ( \"Id\" );","title":"Insert a single value"},{"location":"guides/queries/insert/#insert-multiple-values","text":"employees . insert () . set ( \"Name\" , \"McCain\" , \"Bill\" ) . set ( \"FirstName\" , \"Jack\" , \"Shepard\" ) . set ( \"ManagerId\" , 34 , 48 ) . set ( \"Active\" , true , true ) . execute ();","title":"Insert multiple values"},{"location":"guides/queries/select/","text":"","title":"Select Query"},{"location":"guides/queries/transactions/","text":"Transactions \u00b6 A transaction is a series of different queries that are related to each other and are executed in different steps of the application logic. Transaction gives you the possibilities to rollback your database actions if your code fails, or you want user give an option to cancel an ongoing process. Use case \u00b6 Transactions are normally used when multiple queries need to be executed without any errors. A simple example is moving an amount form one bank account to another. Both queries must be completed successfully in order not to lose money or generate duplicate amounts. Open a new transaction \u00b6 A new transaction is opened with .transact() on a database or collection object. A transaction is alive until it is committed or rollbacked, after that you have to open a new transaction. Unlike using .execute() on the query itself, you pass your query to the transaction object. The transaction will then execute the query in an isolated thread on the database. Note: For each transaction a new reserved connection to the database is opened. QueryTransaction transaction = database . transact () transaction . execute ( balances . update (). add ( \"Id\" , 9.99 ). where ( \"Id\" , 6562 )); Commit a transaction \u00b6 When your process is completed and all queries have been executed, close the transaction with .commit() to tell the database that everything worked. transaction . commit (); Rollback a transaction \u00b6 Should your code fail or a user aborts the process, use .rollback() to tell the database to cancel everything, changes will than no longer apply. This part is usually placed in a catch statement. transaction . rollback (); Sample implementation \u00b6 This code below shows a small example of how to use a transaction. Database database = driver . getDatabase ( \"Bank\" ); DatabaseCollection balances = database . getCollection ( \"balances\" ); QueryTransaction transaction = database . transact (); try { //Perform your queries transaction . execute ( balances . update (). add ( \"Id\" , 9.99 ). where ( \"Id\" , 6562 )); transaction . execute ( balances . update (). subtract ( \"Id\" , 9.99 ). where ( \"Id\" , 7830 )); //Cou can also include normal java code transaction . commit (); //The code succeeded } catch ( Exception exception ){ transaction . rollback (); //Something failed, rollback the transaction (Changes will not apply in the database) throw exception ; }","title":"Transactions"},{"location":"guides/queries/transactions/#transactions","text":"A transaction is a series of different queries that are related to each other and are executed in different steps of the application logic. Transaction gives you the possibilities to rollback your database actions if your code fails, or you want user give an option to cancel an ongoing process.","title":"Transactions"},{"location":"guides/queries/transactions/#use-case","text":"Transactions are normally used when multiple queries need to be executed without any errors. A simple example is moving an amount form one bank account to another. Both queries must be completed successfully in order not to lose money or generate duplicate amounts.","title":"Use case"},{"location":"guides/queries/transactions/#open-a-new-transaction","text":"A new transaction is opened with .transact() on a database or collection object. A transaction is alive until it is committed or rollbacked, after that you have to open a new transaction. Unlike using .execute() on the query itself, you pass your query to the transaction object. The transaction will then execute the query in an isolated thread on the database. Note: For each transaction a new reserved connection to the database is opened. QueryTransaction transaction = database . transact () transaction . execute ( balances . update (). add ( \"Id\" , 9.99 ). where ( \"Id\" , 6562 ));","title":"Open a new transaction"},{"location":"guides/queries/transactions/#commit-a-transaction","text":"When your process is completed and all queries have been executed, close the transaction with .commit() to tell the database that everything worked. transaction . commit ();","title":"Commit a transaction"},{"location":"guides/queries/transactions/#rollback-a-transaction","text":"Should your code fail or a user aborts the process, use .rollback() to tell the database to cancel everything, changes will than no longer apply. This part is usually placed in a catch statement. transaction . rollback ();","title":"Rollback a transaction"},{"location":"guides/queries/transactions/#sample-implementation","text":"This code below shows a small example of how to use a transaction. Database database = driver . getDatabase ( \"Bank\" ); DatabaseCollection balances = database . getCollection ( \"balances\" ); QueryTransaction transaction = database . transact (); try { //Perform your queries transaction . execute ( balances . update (). add ( \"Id\" , 9.99 ). where ( \"Id\" , 6562 )); transaction . execute ( balances . update (). subtract ( \"Id\" , 9.99 ). where ( \"Id\" , 7830 )); //Cou can also include normal java code transaction . commit (); //The code succeeded } catch ( Exception exception ){ transaction . rollback (); //Something failed, rollback the transaction (Changes will not apply in the database) throw exception ; }","title":"Sample implementation"}]}