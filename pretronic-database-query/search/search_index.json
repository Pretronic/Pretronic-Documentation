{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Overview"},{"location":"changelog/","text":"Changelog \u00b6 Material for MkDocs Insiders \u00b6 1.11.2 _ November 29, 2020 \u00b6 Fixed #2068: Search highlight interprets code blocks as JavaScript 1.11.1 _ November 29, 2020 \u00b6 Refactored styling to be more stable and easier to adjust Fixed some styling regressions from latest features 1.0.0 _ November 22, 2020 \u00b6 Added support for rendering admonitions as inline blocks document.getElementsByClassName(\"md-nav--primary\")[0].hidden = true;","title":"Versions"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#material-for-mkdocs-insiders","text":"","title":"Material for MkDocs Insiders"},{"location":"changelog/#1112-_-november-29-2020","text":"Fixed #2068: Search highlight interprets code blocks as JavaScript","title":"1.11.2 _ November 29, 2020"},{"location":"changelog/#1111-_-november-29-2020","text":"Refactored styling to be more stable and easier to adjust Fixed some styling regressions from latest features","title":"1.11.1 _ November 29, 2020"},{"location":"changelog/#100-_-november-22-2020","text":"Added support for rendering admonitions as inline blocks document.getElementsByClassName(\"md-nav--primary\")[0].hidden = true;","title":"1.0.0 _ November 22, 2020"},{"location":"guides/project-setup/database-collection/","text":"Database collection \u00b6 The database collection holds an undefined amount of entries. It is been created with a predefined schema. From the database object, the database collection can be got. Create a database collection in a database \u00b6 DatabaseCollection customers = database . createCollection ( \"customers\" ) . field ( \"id\" , DataType . INTEGER , FieldOption . AUTO_INCREMENT , FieldOption . PRIMARY_KEY ) . field ( \"name\" , DataType . STRING , FieldOption . NOT_NULL , FieldOption . INDEX ) . field ( \"firstName\" , DataType . STRING , FieldOption . NOT_NULL ) . field ( \"verified\" , DataType . BOOLEAN ) . field ( \"phoneNumber\" , DataType . STRING ) . create (); Queries \u00b6 Note Below are some very simple example queries, for more information and more advanced queries, show in the queries section . Insert query \u00b6 This query inserts a new collection entry with the name Shephard and the firstName Bill . The database collection fields verified and phoneNumber are null. The id will be generated automatically by your database. int generatedId = customers . insert () . set ( \"name\" , \"Shepard\" ) . set ( \"firstName\" , \"Bill\" ) . executeAndGetGeneratedKeyAsInt ( \"id\" ); Find query \u00b6 This query searches for a collection entry, where the value of the field name equals Shepard . In the next step, the result size is printed and is being looped and all fields are printed. Note In some databases, like MySQL, the where operator is equals ignore case by default. Equals ignore case should be changed on database side. FindQuery byName = customers . find (). where ( \"name\" , \"Shepard\" ); QueryResult result = byName . execute (); System . out . println ( result . size ()); result . forEach ( entry -> { int id = entry . getInt ( \"id\" ); String name = entry . getString ( \"name\" ); String firstName = entry . getString ( \"firstName\" ); boolean verified = entry . getBoolean ( \"verified\" ); String phoneNumber = entry . getString ( \"phoneNumber\" ); }); Update query \u00b6 This query updates all entries fields phoneNumber to +49 000000 and verified to true , where the firstName equals Bill . customers . update () . set ( \"phoneNumber\" , \"+49 000000\" ) . set ( \"verified\" , true ) . where ( \"firstName\" , \"Bill\" ). execute (); Delete query \u00b6 This query deletes all entries, where the field firstName equals Bill . collection . delete () . where ( \"firstName\" , \"Bill\" ). execute ();","title":"Database Collection"},{"location":"guides/project-setup/database-collection/#database-collection","text":"The database collection holds an undefined amount of entries. It is been created with a predefined schema. From the database object, the database collection can be got.","title":"Database collection"},{"location":"guides/project-setup/database-collection/#create-a-database-collection-in-a-database","text":"DatabaseCollection customers = database . createCollection ( \"customers\" ) . field ( \"id\" , DataType . INTEGER , FieldOption . AUTO_INCREMENT , FieldOption . PRIMARY_KEY ) . field ( \"name\" , DataType . STRING , FieldOption . NOT_NULL , FieldOption . INDEX ) . field ( \"firstName\" , DataType . STRING , FieldOption . NOT_NULL ) . field ( \"verified\" , DataType . BOOLEAN ) . field ( \"phoneNumber\" , DataType . STRING ) . create ();","title":"Create a database collection in a database"},{"location":"guides/project-setup/database-collection/#queries","text":"Note Below are some very simple example queries, for more information and more advanced queries, show in the queries section .","title":"Queries"},{"location":"guides/project-setup/database-collection/#insert-query","text":"This query inserts a new collection entry with the name Shephard and the firstName Bill . The database collection fields verified and phoneNumber are null. The id will be generated automatically by your database. int generatedId = customers . insert () . set ( \"name\" , \"Shepard\" ) . set ( \"firstName\" , \"Bill\" ) . executeAndGetGeneratedKeyAsInt ( \"id\" );","title":"Insert query"},{"location":"guides/project-setup/database-collection/#find-query","text":"This query searches for a collection entry, where the value of the field name equals Shepard . In the next step, the result size is printed and is being looped and all fields are printed. Note In some databases, like MySQL, the where operator is equals ignore case by default. Equals ignore case should be changed on database side. FindQuery byName = customers . find (). where ( \"name\" , \"Shepard\" ); QueryResult result = byName . execute (); System . out . println ( result . size ()); result . forEach ( entry -> { int id = entry . getInt ( \"id\" ); String name = entry . getString ( \"name\" ); String firstName = entry . getString ( \"firstName\" ); boolean verified = entry . getBoolean ( \"verified\" ); String phoneNumber = entry . getString ( \"phoneNumber\" ); });","title":"Find query"},{"location":"guides/project-setup/database-collection/#update-query","text":"This query updates all entries fields phoneNumber to +49 000000 and verified to true , where the firstName equals Bill . customers . update () . set ( \"phoneNumber\" , \"+49 000000\" ) . set ( \"verified\" , true ) . where ( \"firstName\" , \"Bill\" ). execute ();","title":"Update query"},{"location":"guides/project-setup/database-collection/#delete-query","text":"This query deletes all entries, where the field firstName equals Bill . collection . delete () . where ( \"firstName\" , \"Bill\" ). execute ();","title":"Delete query"},{"location":"guides/project-setup/database/","text":"Database \u00b6 The database can be got from you database driver. It includes the associated database collections. Get a database \u00b6 Database database = driver . getDatabase ( \"Test\" ); Note For more information, like getting or creating a database collection, go to this site","title":"Database"},{"location":"guides/project-setup/database/#database","text":"The database can be got from you database driver. It includes the associated database collections.","title":"Database"},{"location":"guides/project-setup/database/#get-a-database","text":"Database database = driver . getDatabase ( \"Test\" ); Note For more information, like getting or creating a database collection, go to this site","title":"Get a database"},{"location":"guides/project-setup/driver-config-setup/","text":"Driver config \u00b6 The driver config is the base of database driver. It contains the required options to connect the driver to your database. The driver config is divided into remote database driver config for connecting to remote databases and local database driver configs for connecting to local databases like file databases. Pre-Requirements \u00b6 You need a slf4j logger in your runtime. Either you declare a logger on your self, or you can use a PretronicLogger and set it as a slf4j logger instance. Setup a PretronicLogger as slf4j logger instance: PretronicLogger logger = PretronicLoggerFactory . getLogger (); SLF4JStaticBridge . setLogger ( logger ); Create a driver config \u00b6 There are two options to create a driver config. One option is to load it from a document or from a file and the other option is to create a driver config directly from the code. In these examples, we use for the local database config example h2 portable and for remote MySQL. Loading from a document \u00b6 Config examples For a local database: location : 'databases/' driver : 'net.pretronic.databasequery.sql.driver.SQLDatabaseDriver' name : 'Default' dialectName : 'H2Portable' useSSL : false For a remote database: address : '127.0.0.1' username : 'root' password : '******' driver : 'net.pretronic.databasequery.sql.driver.SQLDatabaseDriver' name : 'MySQL' dialectName : 'MySQL' useSSL : false Load a driver config from a file: DatabaseDriverConfig <?> config = DatabaseDriverFactory . create ( DocumentFileType . YAML . getReader (). read ( new File ( \"driver-config.yml\" ))); Create directly from code \u00b6 Create a h2-portable driver config: DatabaseDriverConfig <?> config = new SQLDatabaseDriverConfigBuilder () . setName ( \"H2-Portable\" ) . setLocation ( new File ( \"databases/\" )) . setDialect ( Dialect . H2_PORTABLE ) . setUseSSL ( false ) . build (); Create a mysql driver config: DatabaseDriverConfig <?> config = new SQLDatabaseDriverConfigBuilder () . setName ( \"MySQL\" ) . setAddress ( new InetSocketAddress ( \"127.0.0.1\" , 3306 )) . setDialect ( Dialect . MYSQL ) . setUsername ( \"root\" ) . setPassword ( \"'******'\" ) . setUseSSL ( false ) . build ()","title":"Driver Configuration"},{"location":"guides/project-setup/driver-config-setup/#driver-config","text":"The driver config is the base of database driver. It contains the required options to connect the driver to your database. The driver config is divided into remote database driver config for connecting to remote databases and local database driver configs for connecting to local databases like file databases.","title":"Driver config"},{"location":"guides/project-setup/driver-config-setup/#pre-requirements","text":"You need a slf4j logger in your runtime. Either you declare a logger on your self, or you can use a PretronicLogger and set it as a slf4j logger instance. Setup a PretronicLogger as slf4j logger instance: PretronicLogger logger = PretronicLoggerFactory . getLogger (); SLF4JStaticBridge . setLogger ( logger );","title":"Pre-Requirements"},{"location":"guides/project-setup/driver-config-setup/#create-a-driver-config","text":"There are two options to create a driver config. One option is to load it from a document or from a file and the other option is to create a driver config directly from the code. In these examples, we use for the local database config example h2 portable and for remote MySQL.","title":"Create a driver config"},{"location":"guides/project-setup/driver-config-setup/#loading-from-a-document","text":"","title":"Loading from a document"},{"location":"guides/project-setup/driver-config-setup/#create-directly-from-code","text":"Create a h2-portable driver config: DatabaseDriverConfig <?> config = new SQLDatabaseDriverConfigBuilder () . setName ( \"H2-Portable\" ) . setLocation ( new File ( \"databases/\" )) . setDialect ( Dialect . H2_PORTABLE ) . setUseSSL ( false ) . build (); Create a mysql driver config: DatabaseDriverConfig <?> config = new SQLDatabaseDriverConfigBuilder () . setName ( \"MySQL\" ) . setAddress ( new InetSocketAddress ( \"127.0.0.1\" , 3306 )) . setDialect ( Dialect . MYSQL ) . setUsername ( \"root\" ) . setPassword ( \"'******'\" ) . setUseSSL ( false ) . build ()","title":"Create directly from code"},{"location":"guides/project-setup/driver-setup/","text":"Driver setup \u00b6 The driver is the base of the database connection. From it, you can get databases. It is created with minimum of a driver config and a name. Create a driver \u00b6 DatabaseDriver driver = DatabaseDriverFactory . create ( \"MyDriver\" , driverConfig , logger );","title":"Driver Setup"},{"location":"guides/project-setup/driver-setup/#driver-setup","text":"The driver is the base of the database connection. From it, you can get databases. It is created with minimum of a driver config and a name.","title":"Driver setup"},{"location":"guides/project-setup/driver-setup/#create-a-driver","text":"DatabaseDriver driver = DatabaseDriverFactory . create ( \"MyDriver\" , driverConfig , logger );","title":"Create a driver"},{"location":"guides/project-setup/include-in-project/","text":"Include in your project \u00b6 There are several options to include pretronic database query into your project. In this example below, we show it with maven and gradle. Note You have to include your jdbc drivers, for example mysql or h2 portable. Repository \u00b6 Maven <repository> <id> pretronic </id> <url> https://repository.pretronic.net/repository/pretronic/ </url> </repository> Gradle repositories { maven { url \"https://repository.pretronic.net/repository/pretronic/\" } } Dependencies \u00b6 Note Replace VERSION with your desired version Only api \u00b6 Maven <dependency> <groupId> net.pretronic.databasequery </groupId> <artifactId> pretronicdatabasequery-api </artifactId> <version> VERSION </version> <scope> compile </scope> </dependency> Gradle dependencies { compile 'net.pretronic.databasequery:pretronicdatabasequery-api:VERSION' } For sql \u00b6 Maven <dependency> <groupId> net.pretronic.databasequery </groupId> <artifactId> pretronicdatabasequery-sql </artifactId> <version> VERSION </version> <scope> compile </scope> </dependency> Gradle dependencies { compile 'net.pretronic.databasequery:pretronicdatabasequery-sql:VERSION' }","title":"Include in project"},{"location":"guides/project-setup/include-in-project/#include-in-your-project","text":"There are several options to include pretronic database query into your project. In this example below, we show it with maven and gradle. Note You have to include your jdbc drivers, for example mysql or h2 portable.","title":"Include in your project"},{"location":"guides/project-setup/include-in-project/#repository","text":"Maven <repository> <id> pretronic </id> <url> https://repository.pretronic.net/repository/pretronic/ </url> </repository> Gradle repositories { maven { url \"https://repository.pretronic.net/repository/pretronic/\" } }","title":"Repository"},{"location":"guides/project-setup/include-in-project/#dependencies","text":"Note Replace VERSION with your desired version","title":"Dependencies"},{"location":"guides/project-setup/include-in-project/#only-api","text":"Maven <dependency> <groupId> net.pretronic.databasequery </groupId> <artifactId> pretronicdatabasequery-api </artifactId> <version> VERSION </version> <scope> compile </scope> </dependency> Gradle dependencies { compile 'net.pretronic.databasequery:pretronicdatabasequery-api:VERSION' }","title":"Only api"},{"location":"guides/project-setup/include-in-project/#for-sql","text":"Maven <dependency> <groupId> net.pretronic.databasequery </groupId> <artifactId> pretronicdatabasequery-sql </artifactId> <version> VERSION </version> <scope> compile </scope> </dependency> Gradle dependencies { compile 'net.pretronic.databasequery:pretronicdatabasequery-sql:VERSION' }","title":"For sql"},{"location":"guides/queries/","text":"Pretronic Database Query provides a large set of different queries.","title":"Overview"},{"location":"guides/queries/aggregations/","text":"Aggregations \u00b6 An aggregate function performs a calculation on a set of values, and returns a single value. Aggregate functions are often used in where clauses in combination with groupBy. List of aggregations \u00b6 Aggregation Description MIN This aggregation returns the min value of the given field of the set of result entries MAX This aggregation returns the max value of the given field of the set of result entries COUNT This aggregations counts the amount of result entries AVG This aggregation calculates the average amount of the given field SUM This aggregation sums all field values of the given field","title":"Aggregations"},{"location":"guides/queries/aggregations/#aggregations","text":"An aggregate function performs a calculation on a set of values, and returns a single value. Aggregate functions are often used in where clauses in combination with groupBy.","title":"Aggregations"},{"location":"guides/queries/aggregations/#list-of-aggregations","text":"Aggregation Description MIN This aggregation returns the min value of the given field of the set of result entries MAX This aggregation returns the max value of the given field of the set of result entries COUNT This aggregations counts the amount of result entries AVG This aggregation calculates the average amount of the given field SUM This aggregation sums all field values of the given field","title":"List of aggregations"},{"location":"guides/queries/data-types/","text":"Data Types \u00b6 Data Type are the specific data type for a database collection field. While reading or inserting, there can be converted with DataType Adapters (Show below). List of data types \u00b6 DataType Description DOUBLE Represent decimal numbers DECIMAL Represent decimal numbers FLOAT Represent decimal numbers INTEGER Represent numbers LONG Represent long numbers CHAR Represent short amount of characters STRING Represent a set of characters LONG_TEXT Represent a very long text, in most sql databases, the max size of the column would be multiple gb DATE Represent the java date DATETIME Represent the datetime TIMESTAMP Represent the sql timestamp, it can be got from timestamp long BINARY Represent all binary data UUID Represent uuid class in java, by default the uuid will be converted to binary BOOLEAN Represent boolean DataType Adapter \u00b6 A data type adapter convert a specific java class to another at inserting and converts it back by reading from the result. Create an own adapter \u00b6 In this example, the preregistered uuid type adapter is used. View the UUIDTypeAdapter example at github. Write operation The write method will be called by inserting, finding, deleting and updating a value. @Override public Object write ( UUID value ) { byte [] uuidBytes = new byte [ 16 ] ; ByteBuffer . wrap ( uuidBytes ) . order ( ByteOrder . BIG_ENDIAN ) . putLong ( value . getMostSignificantBits ()) . putLong ( value . getLeastSignificantBits ()); return uuidBytes ; } Read operation The read operation will be called by using the getObject(key/index, javaClass) method in QueryResultEntry. If there is no adapter registered for the class, an exception will be throwed. @Override public UUID read ( Object value ) { return Convert . toUUID ( value ); } Default data type adapters \u00b6 By default, there are several data type adapters registered. On your choice, you can register and unregister all adapters at runtime. Default adapters: - UUID - InetSocketAddress - InetAddress","title":"DataTypes"},{"location":"guides/queries/data-types/#data-types","text":"Data Type are the specific data type for a database collection field. While reading or inserting, there can be converted with DataType Adapters (Show below).","title":"Data Types"},{"location":"guides/queries/data-types/#list-of-data-types","text":"DataType Description DOUBLE Represent decimal numbers DECIMAL Represent decimal numbers FLOAT Represent decimal numbers INTEGER Represent numbers LONG Represent long numbers CHAR Represent short amount of characters STRING Represent a set of characters LONG_TEXT Represent a very long text, in most sql databases, the max size of the column would be multiple gb DATE Represent the java date DATETIME Represent the datetime TIMESTAMP Represent the sql timestamp, it can be got from timestamp long BINARY Represent all binary data UUID Represent uuid class in java, by default the uuid will be converted to binary BOOLEAN Represent boolean","title":"List of data types"},{"location":"guides/queries/data-types/#datatype-adapter","text":"A data type adapter convert a specific java class to another at inserting and converts it back by reading from the result.","title":"DataType Adapter"},{"location":"guides/queries/data-types/#create-an-own-adapter","text":"In this example, the preregistered uuid type adapter is used. View the UUIDTypeAdapter example at github.","title":"Create an own adapter"},{"location":"guides/queries/data-types/#default-data-type-adapters","text":"By default, there are several data type adapters registered. On your choice, you can register and unregister all adapters at runtime. Default adapters: - UUID - InetSocketAddress - InetAddress","title":"Default data type adapters"},{"location":"guides/queries/delete/","text":"Delete Query \u00b6 The delete query is used to delete one or many entries in a database collection. For more information about filtering, see on the search query page . collection . delete (). where ( \"name\" , \"Shepard\" ). execute ();","title":"Delete Query"},{"location":"guides/queries/delete/#delete-query","text":"The delete query is used to delete one or many entries in a database collection. For more information about filtering, see on the search query page . collection . delete (). where ( \"name\" , \"Shepard\" ). execute ();","title":"Delete Query"},{"location":"guides/queries/find/","text":"Find Query \u00b6 The find query is used to get entries from the database. For more information about filtering, see on the search query page . Getting entries \u00b6 Note If you don't specify, which collection fields should be got, all collection fields will be returned Note Every time, where a collection is a parameter, you could choose between the database collection object or just the name as a string Simple getting \u00b6 To simple get fields, just write all fields in the get method as strings. query . get ( \"field1\" , \"field2\" , \"field3\" ) Getting fields from specific database collection \u00b6 This is used, if you join in multiple database collections, and one collection field is multiple times represented. query . get ( collection , \"id\" ) Getting with an alias \u00b6 This is used, if you want to have another name of the field in your result. It is needed, if you want to get two or more fields, which are multiple represented in the result, for example because of a join. query . get ( \"field1\" , \"someOtherName\" ) This is also available with a database collection. query . get ( collection , \"field1\" , \"someOtherName\" ) Getting with an aggregation \u00b6 This is used, if you would like to handle your result with an aggregation, like summing all numbers of a field. query . get ( Aggregation . SUM , \"money\" ) Getting with a function \u00b6 query.getFunction(yourFunction, \"returnName\") These functions are available RowNumberQueryFunction QueryFunction.rowNumberFunction(orderField, order)","title":"Find Query"},{"location":"guides/queries/find/#find-query","text":"The find query is used to get entries from the database. For more information about filtering, see on the search query page .","title":"Find Query"},{"location":"guides/queries/find/#getting-entries","text":"Note If you don't specify, which collection fields should be got, all collection fields will be returned Note Every time, where a collection is a parameter, you could choose between the database collection object or just the name as a string","title":"Getting entries"},{"location":"guides/queries/find/#simple-getting","text":"To simple get fields, just write all fields in the get method as strings. query . get ( \"field1\" , \"field2\" , \"field3\" )","title":"Simple getting"},{"location":"guides/queries/find/#getting-fields-from-specific-database-collection","text":"This is used, if you join in multiple database collections, and one collection field is multiple times represented. query . get ( collection , \"id\" )","title":"Getting fields from specific database collection"},{"location":"guides/queries/find/#getting-with-an-alias","text":"This is used, if you want to have another name of the field in your result. It is needed, if you want to get two or more fields, which are multiple represented in the result, for example because of a join. query . get ( \"field1\" , \"someOtherName\" ) This is also available with a database collection. query . get ( collection , \"field1\" , \"someOtherName\" )","title":"Getting with an alias"},{"location":"guides/queries/find/#getting-with-an-aggregation","text":"This is used, if you would like to handle your result with an aggregation, like summing all numbers of a field. query . get ( Aggregation . SUM , \"money\" )","title":"Getting with an aggregation"},{"location":"guides/queries/find/#getting-with-a-function","text":"query.getFunction(yourFunction, \"returnName\") These functions are available","title":"Getting with a function"},{"location":"guides/queries/insert/","text":"Insert Query \u00b6 The insert query is used to add new rows into your database, there are different possibilities to that. Insert a single value \u00b6 employees . insert () . set ( \"Name\" , \"McCain\" ) . set ( \"FirstName\" , \"Jack\" ) . set ( \"ManagerId\" , 34 ) . set ( \"Active\" , true ) . execute ( \"Id\" ); int id = employees . insert () . set ( \"Name\" , \"McCain\" ) . set ( \"FirstName\" , \"Jack\" ) . set ( \"ManagerId\" , 34 ) . set ( \"Active\" , true ) . executeAndGetGeneratedKeyAsInt ( \"Id\" ); Insert multiple values \u00b6 employees . insert () . set ( \"Name\" , \"McCain\" , \"Bill\" ) . set ( \"FirstName\" , \"Jack\" , \"Shepard\" ) . set ( \"ManagerId\" , 34 , 48 ) . set ( \"Active\" , true , true ) . execute ();","title":"Insert Query"},{"location":"guides/queries/insert/#insert-query","text":"The insert query is used to add new rows into your database, there are different possibilities to that.","title":"Insert Query"},{"location":"guides/queries/insert/#insert-a-single-value","text":"employees . insert () . set ( \"Name\" , \"McCain\" ) . set ( \"FirstName\" , \"Jack\" ) . set ( \"ManagerId\" , 34 ) . set ( \"Active\" , true ) . execute ( \"Id\" ); int id = employees . insert () . set ( \"Name\" , \"McCain\" ) . set ( \"FirstName\" , \"Jack\" ) . set ( \"ManagerId\" , 34 ) . set ( \"Active\" , true ) . executeAndGetGeneratedKeyAsInt ( \"Id\" );","title":"Insert a single value"},{"location":"guides/queries/insert/#insert-multiple-values","text":"employees . insert () . set ( \"Name\" , \"McCain\" , \"Bill\" ) . set ( \"FirstName\" , \"Jack\" , \"Shepard\" ) . set ( \"ManagerId\" , 34 , 48 ) . set ( \"Active\" , true , true ) . execute ();","title":"Insert multiple values"},{"location":"guides/queries/replace/","text":"Replace Query \u00b6","title":"Replace Query"},{"location":"guides/queries/replace/#replace-query","text":"","title":"Replace Query"},{"location":"guides/queries/search/","text":"Search Query \u00b6 The search query is the base query of all queries, which can filter. These are the delete, find, update and replace query. It is used to filter the result on database side. Query operations \u00b6 Simple selecting \u00b6 The simplest query is to only filter with one collection field. QueryResult result = collection . find (). where ( \"name\" , \"Shepard\" ). execute (); Negation \u00b6 To negate a part of a query, you can use the not method in the query. Then you would write in the query consumer all the query part on the given position, which should be negated. For some operations, there are default negation method implementation, so you have a shorter query. query . not ( query -> query . where ( \"name\" , \"Thomas\" )) For the where operator and other operators are, as it is explained above shorter ways to build the query. For more short query parts, see the javadocs . And/Or queries \u00b6 And and or operations are used to specify multiple conditions for the query. All query parts in these queries are connected with the keyword. query . and ( query -> query . where ( \"name\" , \"Thomas\" ). where ( \"gender\" , \"MALE\" )) query . or ( query -> query . where ( \"name\" , \"Thomas\" ). where ( \"name\" , \"Peter\" )) Limit the result \u00b6 For limiting the result size, there are several options to use. It is recommended to limit your result size to prevent an out of memory exception on your client. Warning You can only use limit one time in the query query . limit ( 1000 ) To get all results in pagination, there are some useful query tools to make it easier. query . page ( page , entriesPerPage ) You can also get entries with a range of indices. query . index ( startIndex , endIndex ) Order the result \u00b6 There are many use cases to order a result. You can order your result ascending or descending. Info You can use order by multiple times in the query query . orderBy ( fieldToOrder , SearchOrder . ASC / DESC ) Also, you can order with an aggregation. Handling the query result \u00b6 A query results holds multiple result entries. One query has one result with multiple result entries, where one result entry belongs to one single result (In sql typically one row). Checking size \u00b6 Before you should work with the result entries, you should check if the result has entries. Note In this example, only one result entry is got. To get all entries, you should loop through the result if ( ! result . isEmpty ()) { //Do some stuff QueryResultEntry resultEntry = result . first (); } Getting objects from result entry \u00b6 Every result entry is sorted and one can get values with their index or key. String name = resultEntry . getString ( \"name\" );","title":"Search Query"},{"location":"guides/queries/search/#search-query","text":"The search query is the base query of all queries, which can filter. These are the delete, find, update and replace query. It is used to filter the result on database side.","title":"Search Query"},{"location":"guides/queries/search/#query-operations","text":"","title":"Query operations"},{"location":"guides/queries/search/#simple-selecting","text":"The simplest query is to only filter with one collection field. QueryResult result = collection . find (). where ( \"name\" , \"Shepard\" ). execute ();","title":"Simple selecting"},{"location":"guides/queries/search/#negation","text":"To negate a part of a query, you can use the not method in the query. Then you would write in the query consumer all the query part on the given position, which should be negated. For some operations, there are default negation method implementation, so you have a shorter query. query . not ( query -> query . where ( \"name\" , \"Thomas\" )) For the where operator and other operators are, as it is explained above shorter ways to build the query. For more short query parts, see the javadocs .","title":"Negation"},{"location":"guides/queries/search/#andor-queries","text":"And and or operations are used to specify multiple conditions for the query. All query parts in these queries are connected with the keyword. query . and ( query -> query . where ( \"name\" , \"Thomas\" ). where ( \"gender\" , \"MALE\" )) query . or ( query -> query . where ( \"name\" , \"Thomas\" ). where ( \"name\" , \"Peter\" ))","title":"And/Or queries"},{"location":"guides/queries/search/#limit-the-result","text":"For limiting the result size, there are several options to use. It is recommended to limit your result size to prevent an out of memory exception on your client. Warning You can only use limit one time in the query query . limit ( 1000 ) To get all results in pagination, there are some useful query tools to make it easier. query . page ( page , entriesPerPage ) You can also get entries with a range of indices. query . index ( startIndex , endIndex )","title":"Limit the result"},{"location":"guides/queries/search/#order-the-result","text":"There are many use cases to order a result. You can order your result ascending or descending. Info You can use order by multiple times in the query query . orderBy ( fieldToOrder , SearchOrder . ASC / DESC ) Also, you can order with an aggregation.","title":"Order the result"},{"location":"guides/queries/search/#handling-the-query-result","text":"A query results holds multiple result entries. One query has one result with multiple result entries, where one result entry belongs to one single result (In sql typically one row).","title":"Handling the query result"},{"location":"guides/queries/search/#checking-size","text":"Before you should work with the result entries, you should check if the result has entries. Note In this example, only one result entry is got. To get all entries, you should loop through the result if ( ! result . isEmpty ()) { //Do some stuff QueryResultEntry resultEntry = result . first (); }","title":"Checking size"},{"location":"guides/queries/search/#getting-objects-from-result-entry","text":"Every result entry is sorted and one can get values with their index or key. String name = resultEntry . getString ( \"name\" );","title":"Getting objects from result entry"},{"location":"guides/queries/transactions/","text":"Transactions \u00b6 A transaction is a series of different queries that are related to each other and are executed in different steps of the application logic. Transaction gives you the possibilities to rollback your database actions if your code fails, or you want user give an option to cancel an ongoing process. Use case \u00b6 Transactions are normally used when multiple queries need to be executed without any errors. A simple example is moving an amount form one bank account to another. Both queries must be completed successfully in order not to lose money or generate duplicate amounts. Open a new transaction \u00b6 A new transaction is opened with .transact() on a database or collection object. A transaction is alive until it is committed or rollbacked, after that you have to open a new transaction. Unlike using .execute() on the query itself, you pass your query to the transaction object. The transaction will then execute the query in an isolated thread on the database. Note: For each transaction a new reserved connection to the database is opened. QueryTransaction transaction = database . transact () transaction . execute ( balances . update (). add ( \"Id\" , 9.99 ). where ( \"Id\" , 6562 )); Commit a transaction \u00b6 When your process is completed and all queries have been executed, close the transaction with .commit() to tell the database that everything worked. transaction . commit (); Rollback a transaction \u00b6 Should your code fail or a user aborts the process, use .rollback() to tell the database to cancel everything, changes will than no longer apply. This part is usually placed in a catch statement. transaction . rollback (); Sample implementation \u00b6 This code below shows a small example of how to use a transaction. Database database = driver . getDatabase ( \"Bank\" ); DatabaseCollection balances = database . getCollection ( \"balances\" ); QueryTransaction transaction = database . transact (); try { //Perform your queries transaction . execute ( balances . update (). add ( \"Id\" , 9.99 ). where ( \"Id\" , 6562 )); transaction . execute ( balances . update (). subtract ( \"Id\" , 9.99 ). where ( \"Id\" , 7830 )); //Cou can also include normal java code transaction . commit (); //The code succeeded } catch ( Exception exception ){ transaction . rollback (); //Something failed, rollback the transaction (Changes will not apply in the database) throw exception ; }","title":"Transactions"},{"location":"guides/queries/transactions/#transactions","text":"A transaction is a series of different queries that are related to each other and are executed in different steps of the application logic. Transaction gives you the possibilities to rollback your database actions if your code fails, or you want user give an option to cancel an ongoing process.","title":"Transactions"},{"location":"guides/queries/transactions/#use-case","text":"Transactions are normally used when multiple queries need to be executed without any errors. A simple example is moving an amount form one bank account to another. Both queries must be completed successfully in order not to lose money or generate duplicate amounts.","title":"Use case"},{"location":"guides/queries/transactions/#open-a-new-transaction","text":"A new transaction is opened with .transact() on a database or collection object. A transaction is alive until it is committed or rollbacked, after that you have to open a new transaction. Unlike using .execute() on the query itself, you pass your query to the transaction object. The transaction will then execute the query in an isolated thread on the database. Note: For each transaction a new reserved connection to the database is opened. QueryTransaction transaction = database . transact () transaction . execute ( balances . update (). add ( \"Id\" , 9.99 ). where ( \"Id\" , 6562 ));","title":"Open a new transaction"},{"location":"guides/queries/transactions/#commit-a-transaction","text":"When your process is completed and all queries have been executed, close the transaction with .commit() to tell the database that everything worked. transaction . commit ();","title":"Commit a transaction"},{"location":"guides/queries/transactions/#rollback-a-transaction","text":"Should your code fail or a user aborts the process, use .rollback() to tell the database to cancel everything, changes will than no longer apply. This part is usually placed in a catch statement. transaction . rollback ();","title":"Rollback a transaction"},{"location":"guides/queries/transactions/#sample-implementation","text":"This code below shows a small example of how to use a transaction. Database database = driver . getDatabase ( \"Bank\" ); DatabaseCollection balances = database . getCollection ( \"balances\" ); QueryTransaction transaction = database . transact (); try { //Perform your queries transaction . execute ( balances . update (). add ( \"Id\" , 9.99 ). where ( \"Id\" , 6562 )); transaction . execute ( balances . update (). subtract ( \"Id\" , 9.99 ). where ( \"Id\" , 7830 )); //Cou can also include normal java code transaction . commit (); //The code succeeded } catch ( Exception exception ){ transaction . rollback (); //Something failed, rollback the transaction (Changes will not apply in the database) throw exception ; }","title":"Sample implementation"},{"location":"guides/queries/update/","text":"Update Query \u00b6 The update query is used to change some values of entries. For more information about filtering, see on the search query page . Replace value \u00b6 query . update ( yourField , yourValue ) Update value \u00b6 This is used to calculate the value on database side, like adding a number to the value. Only numbers are possible to use for number. query . add ( yourField , number ) query . subtract ( yourField , number ) query . multiply ( yourField , number ) query . divide ( yourField , number )","title":"Update Query"},{"location":"guides/queries/update/#update-query","text":"The update query is used to change some values of entries. For more information about filtering, see on the search query page .","title":"Update Query"},{"location":"guides/queries/update/#replace-value","text":"query . update ( yourField , yourValue )","title":"Replace value"},{"location":"guides/queries/update/#update-value","text":"This is used to calculate the value on database side, like adding a number to the value. Only numbers are possible to use for number. query . add ( yourField , number ) query . subtract ( yourField , number ) query . multiply ( yourField , number ) query . divide ( yourField , number )","title":"Update value"}]}